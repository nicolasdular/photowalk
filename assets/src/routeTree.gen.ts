/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as AppPhotosBackupRouteImport } from './routes/_app/photos-backup'
import { Route as AppCollectionsNewRouteImport } from './routes/_app/collections/new'
import { Route as AppCollectionsCollectionIdRouteImport } from './routes/_app/collections/$collectionId'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppPhotosBackupRoute = AppPhotosBackupRouteImport.update({
  id: '/photos-backup',
  path: '/photos-backup',
  getParentRoute: () => AppRoute,
} as any)
const AppCollectionsNewRoute = AppCollectionsNewRouteImport.update({
  id: '/collections/new',
  path: '/collections/new',
  getParentRoute: () => AppRoute,
} as any)
const AppCollectionsCollectionIdRoute =
  AppCollectionsCollectionIdRouteImport.update({
    id: '/collections/$collectionId',
    path: '/collections/$collectionId',
    getParentRoute: () => AppRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/signup': typeof SignupRoute
  '/photos-backup': typeof AppPhotosBackupRoute
  '/': typeof AppIndexRoute
  '/collections/$collectionId': typeof AppCollectionsCollectionIdRoute
  '/collections/new': typeof AppCollectionsNewRoute
}
export interface FileRoutesByTo {
  '/signup': typeof SignupRoute
  '/photos-backup': typeof AppPhotosBackupRoute
  '/': typeof AppIndexRoute
  '/collections/$collectionId': typeof AppCollectionsCollectionIdRoute
  '/collections/new': typeof AppCollectionsNewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/signup': typeof SignupRoute
  '/_app/photos-backup': typeof AppPhotosBackupRoute
  '/_app/': typeof AppIndexRoute
  '/_app/collections/$collectionId': typeof AppCollectionsCollectionIdRoute
  '/_app/collections/new': typeof AppCollectionsNewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/signup'
    | '/photos-backup'
    | '/'
    | '/collections/$collectionId'
    | '/collections/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/signup'
    | '/photos-backup'
    | '/'
    | '/collections/$collectionId'
    | '/collections/new'
  id:
    | '__root__'
    | '/_app'
    | '/signup'
    | '/_app/photos-backup'
    | '/_app/'
    | '/_app/collections/$collectionId'
    | '/_app/collections/new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  SignupRoute: typeof SignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/photos-backup': {
      id: '/_app/photos-backup'
      path: '/photos-backup'
      fullPath: '/photos-backup'
      preLoaderRoute: typeof AppPhotosBackupRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/collections/new': {
      id: '/_app/collections/new'
      path: '/collections/new'
      fullPath: '/collections/new'
      preLoaderRoute: typeof AppCollectionsNewRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/collections/$collectionId': {
      id: '/_app/collections/$collectionId'
      path: '/collections/$collectionId'
      fullPath: '/collections/$collectionId'
      preLoaderRoute: typeof AppCollectionsCollectionIdRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppPhotosBackupRoute: typeof AppPhotosBackupRoute
  AppIndexRoute: typeof AppIndexRoute
  AppCollectionsCollectionIdRoute: typeof AppCollectionsCollectionIdRoute
  AppCollectionsNewRoute: typeof AppCollectionsNewRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppPhotosBackupRoute: AppPhotosBackupRoute,
  AppIndexRoute: AppIndexRoute,
  AppCollectionsCollectionIdRoute: AppCollectionsCollectionIdRoute,
  AppCollectionsNewRoute: AppCollectionsNewRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
