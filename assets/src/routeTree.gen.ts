/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as AppWalksNewRouteImport } from './routes/_app/walks/new'
import { Route as AppWalksCollectionIdRouteImport } from './routes/_app/walks/$collectionId'
import { Route as AppWalksCollectionIdPhotosPhotoIdRouteImport } from './routes/_app/walks/$collectionId/photos/$photoId'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const AppWalksNewRoute = AppWalksNewRouteImport.update({
  id: '/walks/new',
  path: '/walks/new',
  getParentRoute: () => AppRoute,
} as any)
const AppWalksCollectionIdRoute = AppWalksCollectionIdRouteImport.update({
  id: '/walks/$collectionId',
  path: '/walks/$collectionId',
  getParentRoute: () => AppRoute,
} as any)
const AppWalksCollectionIdPhotosPhotoIdRoute =
  AppWalksCollectionIdPhotosPhotoIdRouteImport.update({
    id: '/photos/$photoId',
    path: '/photos/$photoId',
    getParentRoute: () => AppWalksCollectionIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/signup': typeof SignupRoute
  '/': typeof AppIndexRoute
  '/walks/$collectionId': typeof AppWalksCollectionIdRouteWithChildren
  '/walks/new': typeof AppWalksNewRoute
  '/walks/$collectionId/photos/$photoId': typeof AppWalksCollectionIdPhotosPhotoIdRoute
}
export interface FileRoutesByTo {
  '/signup': typeof SignupRoute
  '/': typeof AppIndexRoute
  '/walks/$collectionId': typeof AppWalksCollectionIdRouteWithChildren
  '/walks/new': typeof AppWalksNewRoute
  '/walks/$collectionId/photos/$photoId': typeof AppWalksCollectionIdPhotosPhotoIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/signup': typeof SignupRoute
  '/_app/': typeof AppIndexRoute
  '/_app/walks/$collectionId': typeof AppWalksCollectionIdRouteWithChildren
  '/_app/walks/new': typeof AppWalksNewRoute
  '/_app/walks/$collectionId/photos/$photoId': typeof AppWalksCollectionIdPhotosPhotoIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/signup'
    | '/'
    | '/walks/$collectionId'
    | '/walks/new'
    | '/walks/$collectionId/photos/$photoId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/signup'
    | '/'
    | '/walks/$collectionId'
    | '/walks/new'
    | '/walks/$collectionId/photos/$photoId'
  id:
    | '__root__'
    | '/_app'
    | '/signup'
    | '/_app/'
    | '/_app/walks/$collectionId'
    | '/_app/walks/new'
    | '/_app/walks/$collectionId/photos/$photoId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  SignupRoute: typeof SignupRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/walks/new': {
      id: '/_app/walks/new'
      path: '/walks/new'
      fullPath: '/walks/new'
      preLoaderRoute: typeof AppWalksNewRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/walks/$collectionId': {
      id: '/_app/walks/$collectionId'
      path: '/walks/$collectionId'
      fullPath: '/walks/$collectionId'
      preLoaderRoute: typeof AppWalksCollectionIdRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/walks/$collectionId/photos/$photoId': {
      id: '/_app/walks/$collectionId/photos/$photoId'
      path: '/photos/$photoId'
      fullPath: '/walks/$collectionId/photos/$photoId'
      preLoaderRoute: typeof AppWalksCollectionIdPhotosPhotoIdRouteImport
      parentRoute: typeof AppWalksCollectionIdRoute
    }
  }
}

interface AppWalksCollectionIdRouteChildren {
  AppWalksCollectionIdPhotosPhotoIdRoute: typeof AppWalksCollectionIdPhotosPhotoIdRoute
}

const AppWalksCollectionIdRouteChildren: AppWalksCollectionIdRouteChildren = {
  AppWalksCollectionIdPhotosPhotoIdRoute:
    AppWalksCollectionIdPhotosPhotoIdRoute,
}

const AppWalksCollectionIdRouteWithChildren =
  AppWalksCollectionIdRoute._addFileChildren(AppWalksCollectionIdRouteChildren)

interface AppRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppWalksCollectionIdRoute: typeof AppWalksCollectionIdRouteWithChildren
  AppWalksNewRoute: typeof AppWalksNewRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppWalksCollectionIdRoute: AppWalksCollectionIdRouteWithChildren,
  AppWalksNewRoute: AppWalksNewRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  SignupRoute: SignupRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
